import numpy as np
import RPi.GPIO as GPIO
import cv2
import time

# Initialize the camera
cap = cv2.VideoCapture(0)
cap.set(3, 160)  # Set width to 160
cap.set(4, 120)  # Set height to 120
cap.set(cv2.CAP_PROP_FPS, 20)  # Set frames per second
fps = int(cap.get(5))  # Get current FPS
print("fps:", fps)

# Motor control pins
in1 = 3
in2 = 5
in3 = 29
in4 = 31
enA = 32
enB = 33
c = ""

# Setup GPIO
GPIO.setmode(GPIO.BOARD)
GPIO.setup(enA, GPIO.OUT)
GPIO.setup(enB, GPIO.OUT)
GPIO.setup(in1, GPIO.OUT)
GPIO.setup(in2, GPIO.OUT)
GPIO.setup(in3, GPIO.OUT)
GPIO.setup(in4, GPIO.OUT)

# Setup PWM for motor speed control
p1 = GPIO.PWM(enA, 30)  # PWM frequency 30Hz
p2 = GPIO.PWM(enB, 30)  # PWM frequency 30Hz
p1.start(15)  # Initial duty cycle
p2.start(15)  # Initial duty cycle

# Motor control functions
def forward():
    GPIO.output(in1, GPIO.HIGH)
    GPIO.output(in2, GPIO.LOW)
    GPIO.output(in3, GPIO.HIGH)
    GPIO.output(in4, GPIO.LOW)
    p1.start(13)  # Speed adjustment
    p2.start(13)

def backward():
    GPIO.output(in1, GPIO.LOW)
    GPIO.output(in2, GPIO.HIGH)
    GPIO.output(in3, GPIO.LOW)
    GPIO.output(in4, GPIO.HIGH)

def left():
    GPIO.output(in1, GPIO.HIGH)
    GPIO.output(in2, GPIO.LOW)
    GPIO.output(in3, GPIO.LOW)
    GPIO.output(in4, GPIO.HIGH)
    p1.start(12)
    p2.start(15)

def right():
    GPIO.output(in1, GPIO.LOW)
    GPIO.output(in2, GPIO.HIGH)
    GPIO.output(in3, GPIO.HIGH)
    GPIO.output(in4, GPIO.LOW)
    p1.start(15)
    p2.start(12)

def stop():
    GPIO.output(in1, GPIO.LOW)
    GPIO.output(in2, GPIO.LOW)
    GPIO.output(in3, GPIO.LOW)
    GPIO.output(in4, GPIO.LOW)

# Initialize with stop state
stop()

try:
    while True:
        ret, frame = cap.read()  # Capture frame from the camera
        hsvFrame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)  # Convert to HSV

        # Color detection - red, green, and blue
        red_lower = np.array([136, 87, 111], np.uint8)
        red_upper = np.array([180, 255, 255], np.uint8)
        red_mask = cv2.inRange(hsvFrame, red_lower, red_upper)

        green_lower = np.array([25, 52, 72], np.uint8)
        green_upper = np.array([102, 255, 255], np.uint8)
        green_mask = cv2.inRange(hsvFrame, green_lower, green_upper)

        blue_lower = np.array([94, 80, 2], np.uint8)
        blue_upper = np.array([120, 255, 255], np.uint8)
        blue_mask = cv2.inRange(hsvFrame, blue_lower, blue_upper)

        # Kernel for morphological transformation (removing noise)
        kernel = np.ones((5, 5), "uint8")

        # Dilate masks to fill gaps
        red_mask = cv2.dilate(red_mask, kernel)
        green_mask = cv2.dilate(green_mask, kernel)
        blue_mask = cv2.dilate(blue_mask, kernel)

        # Contour detection for lane tracking
        low_b = np.uint8([80, 80, 80])
        high_b = np.uint8([0, 0, 0])
        mask = cv2.inRange(frame, high_b, low_b)
        contours, hierarchy = cv2.findContours(mask, 1, cv2.CHAIN_APPROX_NONE)
        
        if len(contours) > 0:
            c = max(contours, key=cv2.contourArea)
            M = cv2.moments(c)
            if M["m00"] != 0:
                cx = int(M['m10'] / M['m00'])
                cy = int(M['m01'] / M['m00'])
                print("CX:", str(cx), "CY:", str(cy))

                if cx >= 120:
                    print("Turn Right")
                    right()
                elif 40 < cx < 120:
                    print("On Track!")
                    forward()
                elif cx <= 40:
                    print("Turn Left")
                    left()

                cv2.circle(frame, (cx, cy), 5, (255, 255, 255), -1)
        else:
            print("I don't see the line")
            stop()

        # Display frames
        cv2.imshow("Frame", frame)
        cv2.imshow("Mask", mask)

        if cv2.waitKey(1) & 0xff == ord('q'):
            stop()
            break

finally:
    GPIO.cleanup()
    cap.release()
    cv2.destroyAllWindows()
